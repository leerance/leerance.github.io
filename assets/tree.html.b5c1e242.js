import{_ as e,o as t,c as a,e as i}from"./app.c4d54343.js";const r="/images/knowledge/university/DataTructure/Untitled.png",n="/images/knowledge/university/DataTructure/Untitled1.png",l="/images/knowledge/university/DataTructure/Untitled2.png",d="/images/knowledge/university/DataTructure/Untitled3.png",s={},o=i('<h1 id="数和二叉树" tabindex="-1"><a class="header-anchor" href="#数和二叉树" aria-hidden="true">#</a> 数和二叉树</h1><h1 id="数的基本概念" tabindex="-1"><a class="header-anchor" href="#数的基本概念" aria-hidden="true">#</a> 数的基本概念</h1><h2 id="数的定义" tabindex="-1"><a class="header-anchor" href="#数的定义" aria-hidden="true">#</a> 数的定义</h2><ol><li>形式化定义</li></ol><p>数：T={D,R} 。D是包含n个节点的有穷集合（n≥0）。当n=0时为空树，否则关系R满足以下条件：</p><ul><li>有且仅有一个节点d0∈D，它对于关系R来说没有前驱节点，节点d0称作树的根节点。</li><li>除节点d0外，D中的每个节点对于关系R来说都有且仅有一个前驱节点。</li><li>D中每个节点对于关系R来说可以有零个或多个后继节点。</li></ul><ol><li>递归定义</li></ol><p>树是由n（n≥0）个节点组成的有限集合（记为T）。其中：</p><ul><li>如果n=0，它是一棵空树，这是树的特例；</li><li>如果n&gt;0，这n个节点中存在（有仅存在）一个节点作为树的根节点，简称为根节点（root），其余节点可分为m （m&gt;0）个互不相交的有限集T1,T2,…,Tm,其中每一棵子集本身又是一棵符合本定义的树，称为根root的子树。</li></ul><h2 id="树的表示" tabindex="-1"><a class="header-anchor" href="#树的表示" aria-hidden="true">#</a> 树的表示</h2><p>（1）树形表示法。这是树的最基本的表示，使用一棵倒置的树表示树结构，非常直观和形象。</p><p><img src="'+r+'" alt="Untitled"></p><p>（2）文氏图表示法。使用集合以及集合的包含关系描述树结构。下图就是树的文氏图表示法。</p><p><img src="'+n+'" alt="Untitled"></p><p>（3）凹入表示法。使用线段的伸缩描述树结构。下图是树的凹入表示法。</p><p><img src="'+l+'" alt="Untitled"></p><p>（4）括号表示法。将树的根节点写在括号的左边，除根节点之外的其余节点写在括号中并用逗号间隔来描述树结构。下图是树的括号表示法。</p><p><img src="'+d+'" alt="Untitled"></p><h2 id="树的基本术语" tabindex="-1"><a class="header-anchor" href="#树的基本术语" aria-hidden="true">#</a> 树的基本术语</h2><h3 id="节点的度与书的度" tabindex="-1"><a class="header-anchor" href="#节点的度与书的度" aria-hidden="true">#</a> 节点的度与书的度</h3>',20),c=[o];function h(p,u){return t(),a("div",null,c)}const m=e(s,[["render",h],["__file","tree.html.vue"]]);export{m as default};
